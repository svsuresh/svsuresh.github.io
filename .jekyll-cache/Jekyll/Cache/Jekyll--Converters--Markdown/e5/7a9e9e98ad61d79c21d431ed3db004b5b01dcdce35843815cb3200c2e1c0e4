I"8,<p>One of the strengths of AWK is column operation which makes column based manipulation of text files are easy. One such example as follows below. Example text is as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>test.txt 
	1:924024
	1:924310
SAMD11 	1:930353
SAMD11 	1:930939
NOC2L  	1:944858
NOC2L  	1:946247
KLHL17 	1:960891
KLHL17 	1:961945

</code></pre></div></div>

<p>First two lines have no values in first column and each column is separated by tab.  User request is to fill it up with incremental numbers, followed by a text <code class="language-plaintext highlighter-rouge">:na</code>. It is easy with awk as follows:</p>

<div class="language-awk highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span> <span class="nx">awk</span> <span class="o">-</span><span class="nx">F</span> <span class="s2">"\t"</span> <span class="o">-</span><span class="nx">v</span> <span class="kc">OFS</span><span class="o">=</span><span class="s2">"\t"</span> <span class="err">'</span><span class="p">{</span><span class="k">if</span> <span class="p">(</span><span class="nv">$1</span><span class="o">==</span><span class="s2">""</span><span class="p">)</span> <span class="nv">$1</span><span class="o">=</span><span class="kc">NR</span><span class="s2">":na"</span><span class="p">}</span><span class="mi">1</span><span class="err">'</span> <span class="nx">test</span><span class="p">.</span><span class="nx">txt</span> 

<span class="mi">1</span><span class="p">:</span><span class="nx">na</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">924024</span>
<span class="mi">2</span><span class="p">:</span><span class="nx">na</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">924310</span>
<span class="nx">SAMD11</span> 	<span class="mi">1</span><span class="p">:</span><span class="mi">930353</span>
<span class="nx">SAMD11</span> 	<span class="mi">1</span><span class="p">:</span><span class="mi">930939</span>
<span class="nx">NOC2L</span>  	<span class="mi">1</span><span class="p">:</span><span class="mi">944858</span>
<span class="nx">NOC2L</span>  	<span class="mi">1</span><span class="p">:</span><span class="mi">946247</span>
<span class="nx">KLHL17</span> 	<span class="mi">1</span><span class="p">:</span><span class="mi">960891</span>
<span class="nx">KLHL17</span> 	<span class="mi">1</span><span class="p">:</span><span class="mi">961945</span>

</code></pre></div></div>

<p>using ternary operator in awk:</p>
<div class="language-awk highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nv">$</span> <span class="nx">awk</span> <span class="o">-</span><span class="nx">F</span> <span class="s2">"\t"</span> <span class="o">-</span><span class="nx">v</span> <span class="kc">OFS</span><span class="o">=</span><span class="s2">"\t"</span> <span class="err">'</span><span class="p">{</span> <span class="p">(</span><span class="nv">$1</span><span class="o">==</span><span class="s2">""</span><span class="p">)?</span> <span class="p">(</span><span class="nv">$1</span><span class="o">=</span><span class="kc">NR</span><span class="s2">":na"</span><span class="p">):</span><span class="nv">$1</span><span class="p">}</span><span class="mi">1</span><span class="err">'</span> <span class="nx">test</span><span class="p">.</span><span class="nx">txt</span> 

<span class="mi">1</span><span class="p">:</span><span class="nx">na</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">924024</span>
<span class="mi">2</span><span class="p">:</span><span class="nx">na</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">924310</span>
<span class="nx">SAMD11</span> 	<span class="mi">1</span><span class="p">:</span><span class="mi">930353</span>
<span class="nx">SAMD11</span> 	<span class="mi">1</span><span class="p">:</span><span class="mi">930939</span>
<span class="nx">NOC2L</span>  	<span class="mi">1</span><span class="p">:</span><span class="mi">944858</span>
<span class="nx">NOC2L</span>  	<span class="mi">1</span><span class="p">:</span><span class="mi">946247</span>
<span class="nx">KLHL17</span> 	<span class="mi">1</span><span class="p">:</span><span class="mi">960891</span>
<span class="nx">KLHL17</span> 	<span class="mi">1</span><span class="p">:</span><span class="mi">961945</span>

</code></pre></div></div>

<p>But what if user wants to number each and every line, but empty one being filled with <code class="language-plaintext highlighter-rouge">na</code></p>

<div class="language-awk highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span> <span class="nx">awk</span> <span class="o">-</span><span class="nx">F</span> <span class="s2">"\t"</span> <span class="o">-</span><span class="nx">v</span> <span class="kc">OFS</span><span class="o">=</span><span class="s2">"\t"</span> <span class="err">'</span><span class="p">{</span> <span class="p">(</span><span class="nv">$1</span><span class="o">==</span><span class="s2">" "</span><span class="p">)?</span> <span class="p">(</span><span class="nv">$1</span><span class="o">=</span><span class="kc">NR</span><span class="s2">":na"</span><span class="p">):(</span><span class="nv">$1</span><span class="o">=</span><span class="kc">NR</span><span class="s2">":"</span><span class="nv">$1</span><span class="p">)}</span><span class="mi">1</span><span class="err">'</span> <span class="nx">test</span><span class="p">.</span><span class="nx">txt</span>

<span class="mi">1</span><span class="p">:</span><span class="nx">na</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">924024</span>
<span class="mi">2</span><span class="p">:</span><span class="nx">na</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">924310</span>
<span class="mi">3</span><span class="p">:</span><span class="nx">SAMD11</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">930353</span>
<span class="mi">4</span><span class="p">:</span><span class="nx">SAMD11</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">930939</span>
<span class="mi">5</span><span class="p">:</span><span class="nx">NOC2L</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">944858</span>
<span class="mi">6</span><span class="p">:</span><span class="nx">NOC2L</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">946247</span>
<span class="mi">7</span><span class="p">:</span><span class="nx">KLHL17</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">960891</span>
<span class="mi">8</span><span class="p">:</span><span class="nx">KLHL17</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">961945</span>


</code></pre></div></div>

<p>Now this is easy. Right? But user wants a different way. All duplicated entries must have same numbering, while empty ones should have individual entries. Itâ€™s tricky. Without writing large code, I could not collapse rows, based on a column in awk. So I used datamash.  I wish datamash had expand option for any given column just the way they have group based collapse.</p>

<p>here is the code any way. A little bit messy, but works.</p>

<div class="language-awk highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nv">$</span> <span class="nx">awk</span> <span class="o">-</span><span class="nx">F</span> <span class="s2">"\t"</span> <span class="o">-</span><span class="nx">v</span> <span class="kc">OFS</span><span class="o">=</span><span class="s2">"\t"</span> <span class="err">'</span><span class="nv">$1</span><span class="o">==</span><span class="s2">" "</span> <span class="p">{</span><span class="nv">$1</span><span class="o">=</span><span class="s2">"na_"</span><span class="kc">NR</span><span class="p">}</span><span class="mi">1</span><span class="err">'</span> <span class="nx">test</span><span class="p">.</span><span class="nx">txt</span> <span class="err">\</span>
	<span class="o">|</span> <span class="nx">datamash</span> <span class="o">-</span><span class="nx">g1</span>  <span class="nx">collapse</span> <span class="mi">2</span> <span class="err">\</span>
	<span class="o">|</span> <span class="nx">awk</span> <span class="o">-</span><span class="nx">F</span> <span class="s2">"\t"</span> <span class="o">-</span><span class="nx">v</span> <span class="kc">OFS</span><span class="o">=</span><span class="err">'\</span><span class="nx">t</span><span class="err">'</span> <span class="err">'</span><span class="p">{</span><span class="nb">split</span><span class="p">(</span><span class="nv">$2</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="s2">","</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">in</span> <span class="nx">a</span><span class="p">)</span> <span class="k">print</span> <span class="kc">NR</span><span class="p">,</span><span class="nv">$1</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]}</span><span class="err">'</span> <span class="err">\</span>
	<span class="o">|</span> <span class="nx">awk</span> <span class="o">-</span><span class="nx">v</span> <span class="kc">OFS</span><span class="o">=</span><span class="s2">"\t"</span> <span class="err">'</span><span class="p">{</span><span class="nb">gsub</span><span class="p">(</span><span class="sr">/_.*/</span><span class="p">,</span><span class="s2">""</span><span class="p">,</span><span class="nv">$2</span><span class="p">)}{</span><span class="k">print</span> <span class="nv">$1</span><span class="s2">":"</span><span class="nv">$2</span><span class="p">,</span><span class="nv">$3</span><span class="p">}</span><span class="err">'</span> 

<span class="mi">1</span><span class="p">:</span><span class="nx">na</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">924024</span>
<span class="mi">2</span><span class="p">:</span><span class="nx">na</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">924310</span>
<span class="mi">3</span><span class="p">:</span><span class="nx">SAMD11</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">930353</span>
<span class="mi">3</span><span class="p">:</span><span class="nx">SAMD11</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">930939</span>
<span class="mi">4</span><span class="p">:</span><span class="nx">NOC2L</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">944858</span>
<span class="mi">4</span><span class="p">:</span><span class="nx">NOC2L</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">946247</span>
<span class="mi">5</span><span class="p">:</span><span class="nx">KLHL17</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">960891</span>
<span class="mi">5</span><span class="p">:</span><span class="nx">KLHL17</span>	<span class="mi">1</span><span class="p">:</span><span class="mi">961945</span>

</code></pre></div></div>
:ET