I""<p>One of the requests I have come across is to filter sequences based on stats in headers. Example is as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;NODE_143195_length_10_cov_16000.000000
TTGTGTTGGTTGTTGTGTTGCCTGTCTTGGTGGCGGTTGTGTTGGCTGCTTTCGTGTCAGTCTCTTCACCGATGTTATGTTGCTCTGTTGTGGCTCCGGC
&gt;NODE_143196_length_100_cov_15891.000000
CTTGTGTTGGTTGTTGTGTTGCCTGTCTTGGTGGCGGTTGTGTTGGCTGCTTTCGTGTCAGTCTCTTCACCGATGTTATGTTGCTCTGTTGTGGCTCCGG
&gt;NODE_143197_length_100_cov_15.000000
GCTTGTGTTGGTTGTTGTGTTGCCTGTCTTGGTGGCGGTTGTGTTGGCTGCTTTCGTGTCAGTCTCTTCACCGATGTTATGTTGCTCTGTTGTGGCTCCG
</code></pre></div></div>
<p>Now user wants to filter sequences with more than length 10 and coverage more than 15. Here is the python code</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">Bio</span> <span class="kn">import</span> <span class="n">SeqIO</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="nb">input</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">output</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="n">out</span><span class="o">=</span><span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">SeqIO</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="s">"fasta"</span><span class="p">):</span>
     <span class="n">isplit</span><span class="o">=</span><span class="n">i</span><span class="p">.</span><span class="nb">id</span><span class="p">.</span><span class="n">rsplit</span><span class="p">(</span><span class="s">"_"</span><span class="p">)</span>
     <span class="k">if</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">isplit</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span><span class="o">&gt;</span><span class="mi">20</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">isplit</span><span class="p">[</span><span class="mi">5</span><span class="p">]))</span><span class="o">&gt;</span><span class="mi">100</span><span class="p">)</span> <span class="p">:</span>
         <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">SeqIO</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="s">"fasta"</span><span class="p">)</span>

</code></pre></div></div>
<p>output from the file</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>./parse_fasta_header.py file.fa out.fa

<span class="nv">$ </span><span class="nb">cat </span>out.fa 
<span class="o">&gt;</span>NODE_143196_length_100_cov_15891.000000
CTTGTGTTGGTTGTTGTGTTGCCTGTCTTGGTGGCGGTTGTGTTGGCTGCTTTCGTGTCA
GTCTCTTCACCGATGTTATGTTGCTCTGTTGTGGCTCCGG
</code></pre></div></div>

:ET